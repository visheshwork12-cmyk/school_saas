# k8s/external-secrets.yaml - External Secrets Configuration for School ERP
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: school-erp-aws-secrets-store
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        # Using IAM Role for Service Account (IRSA)
        jwt:
          serviceAccountRef:
            name: school-erp-external-secrets-sa

---
# Service Account for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: school-erp-external-secrets-sa
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/school-erp-external-secrets-role

---
# External Secret for JWT tokens
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: school-erp-jwt-secrets
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: school-erp-aws-secrets-store
    kind: SecretStore
  
  target:
    name: school-erp-jwt-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_ACCESS_SECRET: "{{ .accessSecret }}"
        JWT_REFRESH_SECRET: "{{ .refreshSecret }}"
  
  data:
  - secretKey: accessSecret
    remoteRef:
      key: school-erp/production/jwt
      property: access_secret
  - secretKey: refreshSecret
    remoteRef:
      key: school-erp/production/jwt
      property: refresh_secret

---
# External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: school-erp-db-secrets
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: school-erp-aws-secrets-store
    kind: SecretStore
  
  target:
    name: school-erp-db-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        MONGODB_URI: "{{ .mongodbUri }}"
        MONGO_ROOT_USERNAME: "{{ .username }}"
        MONGO_ROOT_PASSWORD: "{{ .password }}"
  
  data:
  - secretKey: mongodbUri
    remoteRef:
      key: school-erp/production/database
      property: mongodb_uri
  - secretKey: username
    remoteRef:
      key: school-erp/production/database
      property: username
  - secretKey: password
    remoteRef:
      key: school-erp/production/database
      property: password

---
# External Secret for third-party service credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: school-erp-service-secrets
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
spec:
  refreshInterval: 6h
  secretStoreRef:
    name: school-erp-aws-secrets-store
    kind: SecretStore
  
  target:
    name: school-erp-service-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        CLOUDINARY_CLOUD_NAME: "{{ .cloudinaryCloudName }}"
        CLOUDINARY_API_KEY: "{{ .cloudinaryApiKey }}"
        CLOUDINARY_API_SECRET: "{{ .cloudinaryApiSecret }}"
        SMTP_HOST: "{{ .smtpHost }}"
        SMTP_USER: "{{ .smtpUser }}"
        SMTP_PASS: "{{ .smtpPass }}"
        SENTRY_DSN: "{{ .sentryDsn }}"
        STRIPE_SECRET_KEY: "{{ .stripeSecretKey }}"
  
  data:
  - secretKey: cloudinaryCloudName
    remoteRef:
      key: school-erp/production/services
      property: cloudinary_cloud_name
  - secretKey: cloudinaryApiKey
    remoteRef:
      key: school-erp/production/services
      property: cloudinary_api_key
  - secretKey: cloudinaryApiSecret
    remoteRef:
      key: school-erp/production/services
      property: cloudinary_api_secret
  - secretKey: smtpHost
    remoteRef:
      key: school-erp/production/email
      property: smtp_host
  - secretKey: smtpUser
    remoteRef:
      key: school-erp/production/email
      property: smtp_user
  - secretKey: smtpPass
    remoteRef:
      key: school-erp/production/email
      property: smtp_pass
  - secretKey: sentryDsn
    remoteRef:
      key: school-erp/production/monitoring
      property: sentry_dsn
  - secretKey: stripeSecretKey
    remoteRef:
      key: school-erp/production/payment
      property: stripe_secret_key

---
# Cluster Secret Store (for cluster-wide secrets)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: school-erp-cluster-secrets-store
  labels:
    app: school-erp
    component: secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: school-erp-external-secrets-sa
            namespace: school-erp

---
# Push Secret (sync K8s secret to AWS Secrets Manager)
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: school-erp-backup-secrets
  namespace: school-erp
  labels:
    app: school-erp
    component: secrets
spec:
  refreshInterval: 10s
  secretStoreRefs:
  - name: school-erp-aws-secrets-store
    kind: SecretStore
  
  selector:
    secret:
      name: school-erp-generated-secrets
  
  data:
  - match:
      secretKey: backup-encryption-key
      remoteRef:
        remoteKey: school-erp/production/backup/encryption-key
