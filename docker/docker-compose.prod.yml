# docker-compose.prod.yml - Production environment with optimizations

version: '3.8'

services:
  # Main Application (Multiple replicas for load balancing)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-latest}
        COMMIT_SHA: ${COMMIT_SHA:-}
    image: school-erp:${VERSION:-latest}
    restart: always
    deploy:
      replicas: ${APP_REPLICAS:-3}
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - prod_logs:/app/logs
      - prod_temp:/app/temp
      - prod_uploads:/app/uploads
    ports:
      - "3000"
    networks:
      - school-erp-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # NGINX Load Balancer
  nginx:
    image: nginx:1.24-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - prod_static:/var/www/static:ro
    depends_on:
      - app
    networks:
      - school-erp-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (External service in production, this is for local prod testing)
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    ports:
      - "6379"
    networks:
      - school-erp-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (External service in production, this is for local prod testing)
  mongodb:
    image: mongo:6.0-focal
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_prod_data:/data/db
      - mongodb_prod_config:/data/configdb
    ports:
      - "27017"
    networks:
      - school-erp-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - school-erp-prod

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - school-erp-prod

networks:
  school-erp-prod:
    driver: bridge
    name: school-erp-prod-network

volumes:
  prod_logs:
    name: school-erp-prod-logs
  prod_temp:
    name: school-erp-prod-temp
  prod_uploads:
    name: school-erp-prod-uploads
  prod_static:
    name: school-erp-prod-static
  redis_prod_data:
    name: school-erp-redis-prod-data
  mongodb_prod_data:
    name: school-erp-mongodb-prod-data
  mongodb_prod_config:
    name: school-erp-mongodb-prod-config
  prometheus_data:
    name: school-erp-prometheus-data
  grafana_data:
    name: school-erp-grafana-data
