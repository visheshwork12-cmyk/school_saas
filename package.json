{
  "name": "school-erp-saas",
  "version": "1.0.0",
  "description": "Multi-tenant School ERP SaaS Application",
  "main": "src/server.js",
  "type": "module",
  "keywords": [
    "school-management",
    "erp",
    "saas",
    "multi-tenant",
    "education",
    "nodejs",
    "express",
    "mongodb"
  ],
  "author": {
    "name": "School ERP Team",
    "email": "dev@school-erp.com",
    "url": "https://school-erp.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/school-erp-saas.git"
  },
  "bugs": {
    "url": "https://github.com/your-org/school-erp-saas/issues"
  },
  "homepage": "https://school-erp.com",
  "imports": {
    "#shared/*": "./src/shared/*",
    "#config/*": "./src/shared/config/*",
    "#utils/*": "./src/shared/utils/*",
    "#middleware/*": "./src/shared/middleware/*",
    "#exceptions/*": "./src/shared/exceptions/*",
    "#constants/*": "./src/shared/constants/*",
    "#domain/*": "./src/domain/*",
    "#core/*": "./src/core/*",
    "#infrastructure/*": "./src/infrastructure/*",
    "#api/*": "./src/api/*",
    "#routes/*": "./src/routes/*",
    "#repositories/*": "./src/core/repositories/*"
  },
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "dev:inspect": "nodemon --inspect=0.0.0.0:9229 src/server.js",
    "dev:local": "NODE_ENV=local nodemon src/server.js",
    "dev:docker": "NODE_ENV=development nodemon src/server.js",
    "build": "npm run clean:build && npm run lint && npm run build:assets",
    "build:with-tests": "npm run clean:build && npm run lint && npm run test:ci && npm run build:assets",
    "build:ci": "npm run clean:build && npm run lint && npm run test:ci && npm run build:optimize",
    "build:docker": "npm run build:ci && npm run build:docker-assets",
    "build:vercel": "npm run clean:build && npm run build:optimize",
    "build:aws": "npm run build:ci && npm run build:aws-assets",
    "build:assets": "node scripts/build/build.js --target=vercel",
    "build:optimize": "node scripts/build/optimize.js --level=standard --target=vercel",
    "build:bundle": "node scripts/build/bundle.js",
    "build:docker-assets": "node scripts/build/build.js --target=docker",
    "build:aws-assets": "node scripts/build/build.js --target=aws",
    "test": "NODE_ENV=test jest --coverage --detectOpenHandles --forceExit",
    "test:ci": "NODE_ENV=test jest --config jest.config.js --coverage --ci --watchAll=false --detectOpenHandles --forceExit --maxWorkers=2",
    "test:watch": "NODE_ENV=test jest --watch --detectOpenHandles",
    "test:integration": "NODE_ENV=test jest --testMatch='**/*.integration.test.js' --detectOpenHandles --forceExit --runInBand",
    "test:unit": "NODE_ENV=test jest --testMatch='**/*.unit.test.js' --detectOpenHandles --forceExit",
    "test:e2e": "NODE_ENV=test jest --testMatch='**/*.e2e.test.js' --detectOpenHandles --forceExit --runInBand",
    "test:load": "NODE_ENV=test jest --testMatch='**/*.load.test.js' --detectOpenHandles --forceExit",
    "test:coverage": "NODE_ENV=test jest --coverage --detectOpenHandles --forceExit && npm run test:coverage-report",
    "test:coverage-report": "open coverage/lcov-report/index.html",
    "test:debug": "NODE_ENV=test node --inspect-brk node_modules/.bin/jest --runInBand --no-cache --detectOpenHandles",
    "lint": "eslint src --ext .js,.mjs --cache --cache-location .eslintcache",
    "lint:fix": "eslint src --ext .js,.mjs --fix --cache --cache-location .eslintcache",
    "lint:staged": "lint-staged",
    "lint:ci": "eslint src --ext .js,.mjs --format junit --output-file reports/eslint-results.xml",
    "format": "prettier --write \"src/**/*.{js,mjs,json,md}\"",
    "format:check": "prettier --check \"src/**/*.{js,mjs,json,md}\"",
    "format:staged": "pretty-quick --staged",
    "typecheck": "node scripts/build/typecheck.js",
    "validate": "npm run lint && npm run format:check && npm run typecheck",
    "db:connect": "node scripts/database/test-connection.js",
    "db:migrate": "node scripts/database/migrate.js",
    "db:migrate:up": "node scripts/database/migrate.js up",
    "db:migrate:down": "node scripts/database/migrate.js down",
    "db:migrate:status": "node scripts/database/migrate.js status",
    "db:seed": "node scripts/database/seed.js",
    "db:seed:dev": "NODE_ENV=development node scripts/database/seed.js",
    "db:seed:test": "NODE_ENV=test node scripts/database/seed.js",
    "db:reset": "npm run db:migrate:down && npm run db:migrate:up && npm run db:seed",
    "db:backup": "node scripts/database/backup.js",
    "db:restore": "node scripts/database/restore.js",
    "docs:generate": "jsdoc -c jsdoc.conf.json --verbose",
    "docs:serve": "npx http-server docs/code -p 3001 -o -c-1",
    "docs:clean": "rimraf docs/code && mkdir -p docs/code",
    "docs:build": "npm run docs:clean && npm run docs:generate",
    "docs:swagger": "node scripts/docs/generate-swagger.js",
    "docs:validate": "node scripts/docs/validate-documentation.js",
    "docs:auto-update": "node scripts/docs/auto-doc-updater.js",
    "docs:sync-check": "node scripts/docs/doc-lifecycle.js",
    "docs:dashboard": "node scripts/docs/doc-dashboard.js",
    "docs:alerts": "node scripts/docs/doc-alerts.js",
    "docs:phase2-verify": "./scripts/docs/verify-phase2-docs.sh",
    "docs:phase3-verify": "./scripts/docs/verify-phase3-docs.sh",
    "docs:openapi": "swagger-jsdoc -d scripts/docs/swagger-def.js src/api/v1/**/*.js -o docs/openapi.json",
    "deploy": "node scripts/deployment/deploy.js",
    "deploy:dev": "npm run deploy -- development",
    "deploy:staging": "npm run deploy -- staging",
    "deploy:prod": "npm run deploy -- production",
    "deploy:vercel": "vercel --prod",
    "deploy:vercel:preview": "vercel",
    "deploy:docker:dev": "docker-compose -f docker/docker-compose.dev.yml up -d",
    "deploy:docker:prod": "./scripts/deployment/deploy-docker.sh production",
    "deploy:k8s": "./scripts/deployment/deploy-k8s.sh",
    "deploy:k8s:dev": "./scripts/deployment/deploy-k8s.sh school-erp development",
    "deploy:k8s:prod": "./scripts/deployment/deploy-k8s.sh school-erp production",
    "deploy:aws": "./scripts/deployment/deploy-aws.sh",
    "deploy:aws:plan": "./scripts/deployment/deploy-aws.sh production plan",
    "deploy:aws:apply": "./scripts/deployment/deploy-aws.sh production apply",
    "deploy:aws:destroy": "./scripts/deployment/deploy-aws.sh production destroy",
    "infra:init": "cd infrastructure/terraform && terraform init",
    "infra:plan": "./scripts/deployment/deploy-aws.sh production plan",
    "infra:apply": "./scripts/deployment/deploy-aws.sh production apply",
    "infra:destroy": "./scripts/deployment/deploy-aws.sh production destroy",
    "infra:backup": "./infrastructure/terraform/backup-state.sh production",
    "infra:restore": "./infrastructure/terraform/restore-state.sh production",
    "health:check": "curl -f http://localhost:3000/health || exit 1",
    "health:check:docker": "docker-compose -f docker/docker-compose.yml exec app curl -f http://localhost:3000/health || exit 1",
    "status:check": "curl -f http://localhost:3000/status || exit 1",
    "security:audit": "npm audit --audit-level moderate",
    "security:audit:fix": "npm audit fix",
    "security:scan": "node scripts/security/security-scan.js",
    "security:dependencies": "audit-ci --config audit-ci.json",
    "security:license-check": "license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'",
    "monitor:start": "node scripts/monitoring/start-monitoring.js",
    "monitor:stop": "node scripts/monitoring/stop-monitoring.js",
    "monitor:logs": "node scripts/monitoring/collect-logs.js",
    "prepare": "husky install && npm run build:assets",
    "precommit": "lint-staged && npm run test:unit",
    "prepush": "npm run validate && npm run test:ci",
    "preversion": "npm run validate && npm run test:ci",
    "postversion": "git push && git push --tags",
    "clean": "npm run clean:build && npm run clean:cache && npm run clean:logs",
    "clean:build": "rimraf dist build .next .vercel",
    "clean:cache": "rimraf .eslintcache node_modules/.cache coverage/.nyc_output",
    "clean:logs": "rimraf logs/*.log",
    "clean:modules": "rimraf node_modules package-lock.json",
    "clean:install": "npm run clean:modules && npm install",
    "clean:all": "npm run clean && npm run clean:modules",
    "env:validate": "node scripts/setup/validate-env.js",
    "env:setup": "node scripts/setup/setup-env.js",
    "env:example": "node scripts/setup/generate-env-example.js",
    "tools:update-deps": "ncu -u",
    "tools:check-deps": "ncu",
    "tools:bundle-size": "bundlesize",
    "tools:analyze": "node scripts/tools/analyze-bundle.js",
    "vercel:dev": "vercel dev",
    "vercel:deploy": "vercel --prod",
    "vercel:preview": "vercel"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "bull": "^4.12.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "events": "^3.3.0",
    "express": "^4.19.2",
    "express-mongo-sanitize": "^2.2.0",
    "express-rate-limit": "^7.4.0",
    "helmet": "^7.2.0",
    "hpp": "^0.2.3",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "moment": "^2.30.1",
    "mongoose": "^8.17.2",
    "multer": "^1.4.5-lts.1",
    "node-cache": "^5.1.2",
    "nodemailer": "^6.9.15",
    "on-finished": "^2.4.1",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "redis": "^4.7.1",
    "redoc-express": "^2.1.0",
    "semver": "^7.7.2",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "uuid": "^10.0.0",
    "winston": "^3.14.2",
    "xss-clean": "^0.1.4",
    "yamljs": "^0.3.0",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@apidevtools/swagger-parser": "^12.0.0",
    "@babel/core": "^7.25.2",
    "@babel/preset-env": "^7.25.4",
    "audit-ci": "^7.1.0",
    "better-docs": "^2.7.3",
    "bundlesize": "^0.18.2",
    "chalk": "^5.3.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.2",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jest": "^28.8.3",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-security": "^3.0.1",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "jest-junit": "^16.0.0",
    "jsdoc": "^4.0.4",
    "license-checker": "^25.0.1",
    "lint-staged": "^15.2.0",
    "mongodb-memory-server": "^10.0.0",
    "nodemon": "^3.1.7",
    "npm-check-updates": "^17.1.1",
    "prettier": "^3.6.2",
    "pretty-quick": "^4.0.0",
    "rimraf": "^6.0.1",
    "supertest": "^7.0.0",
    "swagger-jsdoc": "^6.2.8"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "os": [
    "linux",
    "darwin",
    "win32"
  ],
  "cpu": [
    "x64",
    "arm64"
  ],
  "license": "MIT",
  "private": true,
  "lint-staged": {
    "src/**/*.{js,mjs}": [
      "eslint --fix",
      "prettier --write"
    ],
    "src/**/*.{json,md}": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged && npm run test:unit",
      "pre-push": "npm run validate && npm run test:ci",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "bundlesize": [
    {
      "path": "./dist/bundle.js",
      "maxSize": "500kb"
    }
  ],
  "jest": {
    "testEnvironment": "node",
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/**/*.test.js",
      "!src/**/*.spec.js"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "text-summary",
      "html",
      "lcov"
    ],
    "testMatch": [
      "**/__tests__/**/*.js",
      "**/?(*.)+(spec|test).js"
    ],
    "testPathIgnorePatterns": [
      "/node_modules/",
      "/dist/",
      "/coverage/"
    ]
  }
}