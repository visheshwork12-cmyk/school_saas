#!/bin/bash
# scripts/security/comprehensive-scan.sh
set -euo pipefail

SCAN_DIR="security-scans"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
REPORT_DIR="$SCAN_DIR/$TIMESTAMP"

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] SECURITY-SCAN: $*"
}

setup_scan_environment() {
    log "üîß Setting up security scan environment..."
    mkdir -p "$REPORT_DIR"
    
    # Install security tools
    if ! command -v trivy &> /dev/null; then
        log "Installing Trivy..."
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    fi
    
    if ! command -v grype &> /dev/null; then
        log "Installing Grype..."
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    fi
    
    log "‚úÖ Security scan environment ready"
}

run_dependency_scan() {
    log "üîç Running dependency security scan..."
    
    # npm audit
    npm audit --audit-level=low --json > "$REPORT_DIR/npm-audit.json" || true
    npm audit --audit-level=low > "$REPORT_DIR/npm-audit.txt" || true
    
    # Yarn audit if yarn.lock exists
    if [ -f "yarn.lock" ]; then
        yarn audit --json > "$REPORT_DIR/yarn-audit.json" || true
    fi
    
    log "‚úÖ Dependency scan completed"
}

run_container_scan() {
    log "üê≥ Running container security scan..."
    
    # Build image for scanning
    docker build -f docker/Dockerfile.security -t school-erp:security-scan .
    
    # Trivy scan
    trivy image --format json --output "$REPORT_DIR/trivy-results.json" school-erp:security-scan
    trivy image --format table --output "$REPORT_DIR/trivy-results.txt" school-erp:security-scan
    
    # Grype scan
    grype school-erp:security-scan -o json > "$REPORT_DIR/grype-results.json"
    grype school-erp:security-scan -o table > "$REPORT_DIR/grype-results.txt"
    
    log "‚úÖ Container scan completed"
}

run_code_scan() {
    log "üîé Running code security scan..."
    
    # ESLint security scan
    npx eslint src --ext .js,.mjs \
        --config .eslintrc.security.js \
        --format json \
        --output-file "$REPORT_DIR/eslint-security.json" || true
    
    # Semgrep scan
    if command -v semgrep &> /dev/null; then
        semgrep --config=p/security-audit \
                --config=p/javascript \
                --json \
                --output="$REPORT_DIR/semgrep-results.json" src/ || true
    fi
    
    log "‚úÖ Code scan completed"
}

generate_security_report() {
    log "üìä Generating comprehensive security report..."
    
    cat > "$REPORT_DIR/security-summary.md" << EOF
# Security Scan Report

**Date:** $(date)
**Scan ID:** $TIMESTAMP
**Repository:** School ERP SaaS

## Scan Results

### Dependency Vulnerabilities
$(if [ -f "$REPORT_DIR/npm-audit.json" ]; then
    echo "- NPM Audit: $(jq -r '.metadata.vulnerabilities | to_entries[] | select(.value > 0) | "\(.key): \(.value)"' "$REPORT_DIR/npm-audit.json" | wc -l) vulnerabilities found"
else
    echo "- NPM Audit: No scan performed"
fi)

### Container Vulnerabilities
$(if [ -f "$REPORT_DIR/trivy-results.json" ]; then
    echo "- Trivy: $(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | .Severity' "$REPORT_DIR/trivy-results.json" | wc -l) critical/high vulnerabilities"
else
    echo "- Trivy: No scan performed"
fi)

### Code Security Issues
$(if [ -f "$REPORT_DIR/eslint-security.json" ]; then
    echo "- ESLint Security: $(jq -r '.[].messages | length' "$REPORT_DIR/eslint-security.json" | awk '{sum += $1} END {print sum}') issues found"
else
    echo "- ESLint Security: No scan performed"
fi)

## Recommendations

1. Review all CRITICAL and HIGH severity vulnerabilities
2. Update dependencies to latest secure versions
3. Address code security issues identified by static analysis
4. Implement additional security controls as needed

## Files Generated

$(ls -la "$REPORT_DIR" | tail -n +2)

---
*Generated by School ERP Security Scanner*
EOF

    log "‚úÖ Security report generated: $REPORT_DIR/security-summary.md"
}

# Main execution
setup_scan_environment
run_dependency_scan
run_container_scan
run_code_scan
generate_security_report

log "üéâ Comprehensive security scan completed!"
log "üìÅ Reports available in: $REPORT_DIR"
