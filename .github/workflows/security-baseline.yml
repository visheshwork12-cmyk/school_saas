name: 🛡️ Security Baseline Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Security scan type'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - compliance

env:
  NODE_VERSION: '20.x'

jobs:
  dependency-security:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --only=production

      - name: 🛡️ Audit Dependencies (npm audit)
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [[ $CRITICAL_VULNS -gt 0 ]]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
          
          if [[ $HIGH_VULNS -gt 5 ]]; then
            echo "⚠️  Too many high vulnerabilities found!"
            exit 1
          fi

      - name: 🔍 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
        continue-on-error: true

      - name: 📊 Upload Dependency Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-results
          path: |
            npm-audit.json
            snyk-results.json
          retention-days: 30

  code-security:
    name: 🔒 Static Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🛡️ ESLint Security Scan
        run: |
          npx eslint src/ \
            --ext .js,.mjs \
            --config .eslintrc.cjs \
            --format json \
            --output-file eslint-security.json || true

      - name: 🔍 Semgrep Static Analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/nodejs
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: 🔐 Secret Detection with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📊 Upload Code Security Results
        uses: actions/upload-artifact@v4
        with:
          name: code-security-results
          path: |
            eslint-security.json
            semgrep.sarif
          retention-days: 30

  infrastructure-security:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Terraform Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: config/infrastructure/terraform
          format: sarif
          additional_args: --minimum-severity=MEDIUM

      - name: 🐳 Docker Security Scan (Trivy)
        if: github.event.inputs.scan_type != 'quick'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './docker'
          format: 'sarif'
          output: 'docker-security.sarif'

      - name: ☸️ Kubernetes Security Scan (Polaris)
        if: github.event.inputs.scan_type == 'comprehensive'
        run: |
          wget https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz
          tar -xzf polaris_linux_amd64.tar.gz
          ./polaris audit --audit-path k8s/ --format json > polaris-results.json || true

      - name: 📊 Upload Infrastructure Security Results
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security-results
          path: |
            *.sarif
            polaris-results.json
          retention-days: 30

  compliance-check:
    name: 📋 Compliance & Policy Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'compliance' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 License Compliance Check
        run: |
          npm install -g license-checker
          license-checker \
            --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' \
            --excludePrivatePackages \
            --json > license-report.json || true

      - name: 🔍 GDPR Compliance Scan
        run: |
          # Check for GDPR-related patterns in code
          echo "Scanning for GDPR compliance patterns..."
          
          # Look for potential PII handling
          grep -r "email\|phone\|address" src/ --include="*.js" > gdpr-scan.txt || true
          
          # Check for data retention policies
          find . -name "*.md" -exec grep -l "retention\|privacy\|gdpr" {} \; >> gdpr-scan.txt || true

      - name: 🛡️ Security Headers Check
        run: |
          # Verify security middleware configuration
          grep -r "helmet\|cors\|csrf" src/ --include="*.js" > security-headers.txt || true

      - name: 📊 Generate Compliance Report
        run: |
          cat > compliance-report.md << EOF
          # Security Baseline Compliance Report
          
          **Scan Date:** $(date -u)
          **Scan Type:** ${{ github.event.inputs.scan_type || 'scheduled' }}
          **Branch:** ${{ github.ref_name }}
          
          ## Summary
          - License Compliance: $([ -s license-report.json ] && echo "✅ Checked" || echo "❌ Failed")
          - GDPR Patterns: $([ -s gdpr-scan.txt ] && echo "✅ Scanned" || echo "❌ No patterns found")
          - Security Headers: $([ -s security-headers.txt ] && echo "✅ Configured" || echo "❌ Missing")
          
          ## Recommendations
          1. Review license compatibility for new dependencies
          2. Ensure PII handling follows data protection guidelines
          3. Verify security headers are properly configured
          4. Regular security training for development team
          EOF

      - name: 📊 Upload Compliance Results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-results
          path: |
            license-report.json
            gdpr-scan.txt
            security-headers.txt
            compliance-report.md
          retention-days: 90

  security-summary:
    name: 📊 Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security, infrastructure-security]
    if: always()
    
    steps:
      - name: 📁 Download All Security Results
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: 📊 Generate Security Dashboard
        run: |
          cat > security-summary.md << EOF
          # 🛡️ Security Baseline Summary
          
          **Scan Timestamp:** $(date -u)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Scan Results
          
          ### Dependency Security
          - Status: ${{ needs.dependency-security.result }}
          - npm audit: $([ -f security-results/dependency-security-results/npm-audit.json ] && echo "✅ Completed" || echo "❌ Failed")
          - Snyk scan: $([ -f security-results/dependency-security-results/snyk-results.json ] && echo "✅ Completed" || echo "❌ Failed")
          
          ### Code Security  
          - Status: ${{ needs.code-security.result }}
          - ESLint security: $([ -f security-results/code-security-results/eslint-security.json ] && echo "✅ Completed" || echo "❌ Failed")
          - Semgrep analysis: $([ -f security-results/code-security-results/semgrep.sarif ] && echo "✅ Completed" || echo "❌ Failed")
          
          ### Infrastructure Security
          - Status: ${{ needs.infrastructure-security.result }}
          - Terraform security: $([ -f security-results/infrastructure-security-results/*.sarif ] && echo "✅ Completed" || echo "❌ Failed")
          
          ## Action Required
          $(if [[ "${{ needs.dependency-security.result }}" == "failure" || "${{ needs.code-security.result }}" == "failure" || "${{ needs.infrastructure-security.result }}" == "failure" ]]; then
            echo "⚠️  **Security issues detected!** Review the detailed reports and address critical vulnerabilities."
          else
            echo "✅ **No critical security issues detected.** Continue monitoring and maintaining security best practices."
          fi)
          
          EOF

      - name: 💬 Post Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: 🚨 Notify Security Team
        if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          text: |
            🚨 Security baseline check failed!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Please review security scan results immediately.
